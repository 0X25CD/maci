// Copyright 2017 Christian Reitwiessner
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

// 2019 OKIMS

pragma solidity ^0.5.0;

library Pairing {

    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

    struct G1Point {
        uint256 X;
        uint256 Y;
    }

    // Encoding of field elements is: X[0] * z + X[1]
    struct G2Point {
        uint256[2] X;
        uint256[2] Y;
    }

    /*
     * @return The negation of p, i.e. p.plus(p.negate()) should be zero. 
     */
    function negate(G1Point memory p) internal pure returns (G1Point memory) {

        // The prime q in the base field F_q for G1
        if (p.X == 0 && p.Y == 0) {
            return G1Point(0, 0);
        } else {
            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));
        }
    }

    /*
     * @return The sum of two points of G1
     */
    function plus(
        G1Point memory p1,
        G1Point memory p2
    ) internal view returns (G1Point memory r) {

        uint256[4] memory input;
        input[0] = p1.X;
        input[1] = p1.Y;
        input[2] = p2.X;
        input[3] = p2.Y;
        bool success;

        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas, 2000), 6, input, 0xc0, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }

        require(success,"pairing-add-failed");
    }

    /*
     * @return The product of a point on G1 and a scalar, i.e.
     *         p == p.scalar_mul(1) and p.plus(p) == p.scalar_mul(2) for all
     *         points p.
     */
    function scalar_mul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {

        uint256[3] memory input;
        input[0] = p.X;
        input[1] = p.Y;
        input[2] = s;
        bool success;
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas, 2000), 7, input, 0x80, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }
        require (success,"pairing-mul-failed");
    }

    /* @return The result of computing the pairing check
     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1
     *         For example,
     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.
     */
    function pairing(
        G1Point memory a1,
        G2Point memory a2,
        G1Point memory b1,
        G2Point memory b2,
        G1Point memory c1,
        G2Point memory c2,
        G1Point memory d1,
        G2Point memory d2
    ) internal view returns (bool) {

        G1Point[4] memory p1 = [a1, b1, c1, d1];
        G2Point[4] memory p2 = [a2, b2, c2, d2];

        uint256 inputSize = 4 * 6;
        uint256[] memory input = new uint256[](inputSize);

        for (uint256 i = 0; i < 4; i++) {
            uint256 j = i * 6;
            input[j + 0] = p1[i].X;
            input[j + 1] = p1[i].Y;
            input[j + 2] = p2[i].X[0];
            input[j + 3] = p2[i].X[1];
            input[j + 4] = p2[i].Y[0];
            input[j + 5] = p2[i].Y[1];
        }

        uint256[1] memory out;
        bool success;

        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas, 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }

        require(success,"pairing-opcode-failed");

        return out[0] != 0;
    }
}

contract BatchUpdateStateTreeVerifier {

    using Pairing for *;

    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

    struct VerifyingKey {
        Pairing.G1Point alfa1;
        Pairing.G2Point beta2;
        Pairing.G2Point gamma2;
        Pairing.G2Point delta2;
        Pairing.G1Point[80] IC;
    }

    struct Proof {
        Pairing.G1Point A;
        Pairing.G2Point B;
        Pairing.G1Point C;
    }

    function verifyingKey() internal pure returns (VerifyingKey memory vk) {
        vk.alfa1 = Pairing.G1Point(uint256(19437045680431159873273334647551233431812877825270018853745110258705928447931), uint256(1366101277650294019065534946378378787755255639181716155909871369126836436995));
        vk.beta2 = Pairing.G2Point([uint256(13698471225253770095444159822889214581811491226124802630551811232551792307648), uint256(10926688067270092053490444739558901182856934667262615783059245988459094997810)], [uint256(12007694880154614286136440182639238701660218385358647937135868450612528921005), uint256(13413876574782569197943343876887529086130462763435548163414469696840381567372)]);
        vk.gamma2 = Pairing.G2Point([uint256(7111821718599801017587605683630744429829415244290605922538688755723470289704), uint256(12120136950424751188560927280495863840202163710926848595270493130212382595101)], [uint256(8826508788760327551966186059080507235696026517320886498757134461283347689995), uint256(17760471835382553262728731375629562631166735658676594402123379673268779253006)]);
        vk.delta2 = Pairing.G2Point([uint256(19692297504605460832469869816758503318113091957545666966241620644977590479519), uint256(9557686801836782046511271350956543295327845393386269632111577843440109759033)], [uint256(15910743093741808522883040783143668463906305859495553203608946813429954836968), uint256(12032038813023738138425863892930519894954472210058690797683775097388825004346)]);
        vk.IC[0] = Pairing.G1Point(uint256(7724630370978007889193338706903403713822806809994110186615293080316293467556), uint256(4194918976353218727150081903758189785092616120401200134155067557106437661963));
        vk.IC[1] = Pairing.G1Point(uint256(3641370663722242860783370043548970267409721746961442898494698260115391472289), uint256(6410634182315164100376041555766488061475666057861720507626581097817517780985));
        vk.IC[2] = Pairing.G1Point(uint256(4442517641740044635145006609053853517247897273213845396386620380121859595656), uint256(16185626098884370081978391957999397020642722499022563355204202718195939576530));
        vk.IC[3] = Pairing.G1Point(uint256(19788472752706767093869934116422329216847107769909286103140070759741133807838), uint256(1537614251944728291263798380975176274577738084708063160009957379696756549552));
        vk.IC[4] = Pairing.G1Point(uint256(2611324196098358081074455226873221602181313203726672695302611946549784942539), uint256(16652313929069553034082652409754273584537628273961626906393806462939826071855));
        vk.IC[5] = Pairing.G1Point(uint256(15624672789979833738081969651126925280583103802976985238191747753707589193109), uint256(11220510309210209284706117321205925190384426849169145940872040147186390384738));
        vk.IC[6] = Pairing.G1Point(uint256(13841768880182091508442143321246708454961029834412909152726557456403215093524), uint256(18094902613660604827701855346294464218319807251086808893886223028185696528549));
        vk.IC[7] = Pairing.G1Point(uint256(16271850986538875198965159120335881287714937778043323287865891426127734784827), uint256(3367029090155258542517225368763374551544697393651863351228697657948286999993));
        vk.IC[8] = Pairing.G1Point(uint256(21229938021260190156197637765750253701958643691003668926053275874276389244985), uint256(10027222929424624305760967717068041205383597749359734827407221101421533913725));
        vk.IC[9] = Pairing.G1Point(uint256(6796314018115649489078067855223798996422433668347716115113959107609496961952), uint256(7319415490252413685604487950782369122632696635328205474420398159686742787134));
        vk.IC[10] = Pairing.G1Point(uint256(10466336961496577957658841794836231966831482285496832259873791002075931552674), uint256(16659496901396885036518978745488322778973690504825670159624741310881315912484));
        vk.IC[11] = Pairing.G1Point(uint256(5176943743114848686602638800771449954274091348718517254124386447873704457221), uint256(11396429952021683754577473822449605431402935923055974366746588197101727702826));
        vk.IC[12] = Pairing.G1Point(uint256(6723120244286738290455925823025361365509313851087178198053059377633381143913), uint256(4705243520474818466887385979620684703149739957313579027827014810755035255578));
        vk.IC[13] = Pairing.G1Point(uint256(18860282023903044693045212455640604128708784650607740453012103102611718203699), uint256(16402260343113988522980114533227992357405775667798316164618181632723417019513));
        vk.IC[14] = Pairing.G1Point(uint256(20943236646439034118765231554040171655383304362456309872037963912676329160040), uint256(1965419001269774168788765326241838513024192066920975665868402246581718535620));
        vk.IC[15] = Pairing.G1Point(uint256(11689695105886315649717006965504673286116932773127494477183469272546602960881), uint256(10725975062153605520137173404457730493632248864390809036646803742097322828241));
        vk.IC[16] = Pairing.G1Point(uint256(8473472490215995482276616168531965388545658890655615147659548767317794721676), uint256(6387720959470251767485258990449668468129782680007925442629756357193292982261));
        vk.IC[17] = Pairing.G1Point(uint256(10244475206158798627272460318442653711022589170999317265427682618065972140372), uint256(12541167203886131885169562132285568961190510542062337756882371837779720542605));
        vk.IC[18] = Pairing.G1Point(uint256(1123787725001033387983505756639043037892473216849176106408154874190837243313), uint256(15146999363938752547156531307157091488546054287862980760294244233231181047482));
        vk.IC[19] = Pairing.G1Point(uint256(20946267055872422062694478823256004382766402884350679396619353351820416727040), uint256(17414757832037126725635563082583979052140944473009844266979841655266058390831));
        vk.IC[20] = Pairing.G1Point(uint256(3056067240651080224948414738854002911294720562339085489887235365724984668041), uint256(9872232064892955557483309091345255058620323443802606304339569613623262148345));
        vk.IC[21] = Pairing.G1Point(uint256(14090468037319714463044046451581162989943727168415899838952613018130707876068), uint256(993641638716585350649516570559621878893050169535064019544293843244090521569));
        vk.IC[22] = Pairing.G1Point(uint256(5251590832741606370574384315065229355915452379969533752411278724650728770197), uint256(8065873144739540092581367615680393055032283151347170106026780486016637060489));
        vk.IC[23] = Pairing.G1Point(uint256(12598899002103180124911439859035915812941312132102819691267010316427544080666), uint256(18744719970189354680800908478947346499252292795198789659149245353755128185653));
        vk.IC[24] = Pairing.G1Point(uint256(17668852132711067418087907546792996096410140259365061387580466018271473398472), uint256(6999260116615015609709480654039162950764650359347030837890074253856993565096));
        vk.IC[25] = Pairing.G1Point(uint256(7616198776038696370564608111288985036674490001448350737795523491463131944495), uint256(16911087138511012750891834654397679508498888526394279406342891514916833320844));
        vk.IC[26] = Pairing.G1Point(uint256(9295746642363925205415441841436973795319490574159598594388471145731447844362), uint256(1108204736733613221552421766085026058834833969057524533555396740469869746974));
        vk.IC[27] = Pairing.G1Point(uint256(4809974218251010780318396262561103324710325480607736888320873396137293375597), uint256(3893795764073604215834141046407365487350793033359350693016734208210229519140));
        vk.IC[28] = Pairing.G1Point(uint256(7919596540985224454027894505332122172764262387399963651749947501589296010899), uint256(6919522309071987855055642640122574147407259710833367473335421100826354660813));
        vk.IC[29] = Pairing.G1Point(uint256(10417322241040741758316557488059495301314572408791476517187834246535116207354), uint256(20819520932273654834385341731177066000476616312542317903621420360653127245872));
        vk.IC[30] = Pairing.G1Point(uint256(3204403483358470804977278008629974240722816666177122724529229798551725727734), uint256(5532077350702088574915080616201614393798163962017184273290164874634477515842));
        vk.IC[31] = Pairing.G1Point(uint256(1286950074431986810633947431208894363893732028106471153141123150291619744663), uint256(11014796980993765897526420318615862320561579362513735856300469064691384207544));
        vk.IC[32] = Pairing.G1Point(uint256(13361390020395168243061462834789438110248292475754284343723644612481258816175), uint256(1925116276415434610497317157734072513025041196306253068961551740968498775221));
        vk.IC[33] = Pairing.G1Point(uint256(10681684518966502233143453042982628553795738262134716266306228487801776471606), uint256(4844943201668525878861901445275905058577937555037636146344082080334766159314));
        vk.IC[34] = Pairing.G1Point(uint256(17454897440287636637090146083962364123796340514213892915594489793495703591724), uint256(9215101146155178895299288147966082587288544180424586612997374272188983823521));
        vk.IC[35] = Pairing.G1Point(uint256(3974521247013833322716546570451530726165034704057202679310584393022210387060), uint256(4856021025695538527101769742762068901940960399449474878007586813866105087515));
        vk.IC[36] = Pairing.G1Point(uint256(2968576206195748566919905271309148931614171200126961525264097941975524604638), uint256(18143410634700063192665852130279253400704311302475548153636252667009910043186));
        vk.IC[37] = Pairing.G1Point(uint256(16242814338040768519625370425801777197294189968487574618719600014748774711307), uint256(18162251499454868781563132320193821161438480690157925759601261909636490314264));
        vk.IC[38] = Pairing.G1Point(uint256(6883570157020058559710277206672998277012120016300479512671913406138903029472), uint256(10964692850904144600846345277125472973526729477612356781939797401506272970458));
        vk.IC[39] = Pairing.G1Point(uint256(1320287338800110395337143285977090031897638911335049210641186246711470953113), uint256(7102277293874119277760856256595800716880356492420810782652351958866518944537));
        vk.IC[40] = Pairing.G1Point(uint256(8235127758675067959067209876182201154396739610776551690501781730266118292127), uint256(11884172496292826503555949883769694382671293166720112455494402673172062440234));
        vk.IC[41] = Pairing.G1Point(uint256(9982868243456481221505985522277894127199603900784225256450335969140401535924), uint256(899373483255615551036472456163381435576964334364278316904934046623811273506));
        vk.IC[42] = Pairing.G1Point(uint256(11718544107582228388641837782659037222977156455168925368993373821761054651258), uint256(9191678798524510926601537407023381413937112783692208857335287184261480922638));
        vk.IC[43] = Pairing.G1Point(uint256(10398886016757791366154387592638784205957916046805494210633615960130481674238), uint256(7523056256348895841027498957283440264957782957177715788864510398870459371302));
        vk.IC[44] = Pairing.G1Point(uint256(18557691232772755487351613817186588427059030070949080616702495220270512245376), uint256(10679577461711854957021653754010828102149197881671328816018297090512717693101));
        vk.IC[45] = Pairing.G1Point(uint256(12885597326791475774687286269660388327535634315918282359159719643152853537631), uint256(11772770044510119607831651655161708029750157876375045372723617144462475936189));
        vk.IC[46] = Pairing.G1Point(uint256(2828604340225249077491435058392261497367565113586924080579181151982294912043), uint256(11406523292884831410019035178324994524047315868995600223738736462254988706243));
        vk.IC[47] = Pairing.G1Point(uint256(611714368956312368794249412778986668698724157114056523641415548277570646063), uint256(9641075481000096754663101297859553597759840149982710291584234255156102611349));
        vk.IC[48] = Pairing.G1Point(uint256(2292348024600276591069495839751688533622509324389812342683875841220259943774), uint256(11784152955649669773187412533411181050493791561169174233133960152726797618582));
        vk.IC[49] = Pairing.G1Point(uint256(12359793253545536873682508330012151283498530827358343164740310050260859777853), uint256(12223831308647920688592880224876751405864690057432099377824649427121587286577));
        vk.IC[50] = Pairing.G1Point(uint256(6448238410150244906706866169131717848715460494136588479767039639211699676997), uint256(13899533066837469072161087459754335029119931253527691127903199287387967931524));
        vk.IC[51] = Pairing.G1Point(uint256(2380578274843297972561736451926415755227430264602659403345023879692356073030), uint256(17388893690356944825401004767330146481367853685202668750827365800473541982240));
        vk.IC[52] = Pairing.G1Point(uint256(3258615007484423560921384523678060575609227275279559129127649942200787767930), uint256(3708547413635281266230782747812825514670157932728207033343241381918507776478));
        vk.IC[53] = Pairing.G1Point(uint256(14507171412251724592845214772207758465179588429330940223435950555911957130709), uint256(13704897540162678673026009332432625874647614018654107199267886866883753625074));
        vk.IC[54] = Pairing.G1Point(uint256(8155593795419354186547211971574909315239804945742395800807614708833856450109), uint256(6025087521025051826036427338950773797756701237585782996816429349502982296172));
        vk.IC[55] = Pairing.G1Point(uint256(6886954255635561017505256474921415388260784779917794878027803680582497945338), uint256(3029161390793217700484380396543883722758574831863610618234365217996800922837));
        vk.IC[56] = Pairing.G1Point(uint256(17327025776074066325296529065285604321304508842577032487761003111702179942083), uint256(18399659445231246371803812368239742162485297849960718231857279263503719378424));
        vk.IC[57] = Pairing.G1Point(uint256(12226364129514937683950922148459542664712210842714938121934544032178206478261), uint256(14744574700191787655376381960291945460266481944247903011532012714787923465414));
        vk.IC[58] = Pairing.G1Point(uint256(19887648137784073520513060570045916106279052840521185186124845218893076676743), uint256(20735264524550796234940086856215260420520942773909239384043559767001470909667));
        vk.IC[59] = Pairing.G1Point(uint256(19796043120142283408270260170870248435142642599004332293865883270245157008862), uint256(14035753906697535497405054515209763120468520823790903394136064756748845385612));
        vk.IC[60] = Pairing.G1Point(uint256(17782974990807235237898407997249548582962031986262031706405640019002907372150), uint256(7009023437418096589080111779504748679438298854219545400764738274823547981203));
        vk.IC[61] = Pairing.G1Point(uint256(17986688430262051300341899221414256258185053496811707003519698117990311534821), uint256(5827960933840671988869986148037171286852822594365655141784092456820002427267));
        vk.IC[62] = Pairing.G1Point(uint256(18050414421551826803957064922628855707144139639386263676188350163994332669533), uint256(8455999689536105700042049959287897414864289631763157614861308322260703372895));
        vk.IC[63] = Pairing.G1Point(uint256(13718126456336309165741081922908586953217700791553963925806170829016142551975), uint256(8192548530443404131668722960102968615586905237066802573238767089804801339809));
        vk.IC[64] = Pairing.G1Point(uint256(7886080226412707031406193207257801486316992120157537058269566140617042886067), uint256(2426066465213712840515627093341328109924234698611158846722482334531902490501));
        vk.IC[65] = Pairing.G1Point(uint256(18581808166174475316068413108897105648651992289785806855988148739775462852665), uint256(11907037091979594543437338873062248869840384756183456401359604686756627425819));
        vk.IC[66] = Pairing.G1Point(uint256(2274152356626087388026525750584700193283229193237366915611493291640735734275), uint256(7686229588391079190996109537732615189052885410871905328062650958811373633237));
        vk.IC[67] = Pairing.G1Point(uint256(162187720441704214762224127382699005539232717936700298208256209737075494340), uint256(5153717733960734669270772601632870014391198265092463284465205254342246282795));
        vk.IC[68] = Pairing.G1Point(uint256(4381125845718326280715836113469695261441699367901896484808592923882445120754), uint256(1222803515567643564709385993343197587480835207906136874839989539454599635214));
        vk.IC[69] = Pairing.G1Point(uint256(20113988289788675232455064277839237011265204894689212855875503746310039625960), uint256(7452044691729464066755621231970243918790658359317311741924010186861614428622));
        vk.IC[70] = Pairing.G1Point(uint256(16620196387043703451446277978528371183029280351271229643623164577225056036300), uint256(1973966391816064923449475491149271029696617044631943546047235686218227735598));
        vk.IC[71] = Pairing.G1Point(uint256(10688632751310182300062605466925622682035690602718578407757401745931949516921), uint256(17629978749539235735705896984960866808745154143619762607362428559726863883067));
        vk.IC[72] = Pairing.G1Point(uint256(10213737187985146176742608152521665972025198629846486292860557054888998366417), uint256(16320023489930343657909102906296169863737230460066966094648622964511400741154));
        vk.IC[73] = Pairing.G1Point(uint256(20265320286938289355701191166330029067381604108134300610188289032574446190686), uint256(11850408161471987846110167533630100177878837702953312462467354645368139952840));
        vk.IC[74] = Pairing.G1Point(uint256(15572409268398360749783680461568336526894742266221967245265111576163889015024), uint256(3910869949415200804084564403750466529379027601023359217639648197101889701426));
        vk.IC[75] = Pairing.G1Point(uint256(3773246798696354462829545753973378861651586973041141292662599842930839141133), uint256(15012308760449493260254296999484148941006640122263475807762163363693157205192));
        vk.IC[76] = Pairing.G1Point(uint256(16616342930677647471838609999845987499951528196258438989746241412483977300532), uint256(12969465672301564794585464076694059207203714599131397391241658902513552204604));
        vk.IC[77] = Pairing.G1Point(uint256(9131634459010119548654015599559619396011040237523251663235733775718516153031), uint256(7743651405349023216348893990367419361295042002264063749192855534865144236639));
        vk.IC[78] = Pairing.G1Point(uint256(6417814449510335264585729246859600131743898674756005516221754372469242248422), uint256(5338681745099550200270824257428478267735991018317223820419634997226893303933));
        vk.IC[79] = Pairing.G1Point(uint256(12767425522902832043597934764033524822998920967291720290242989046955408791585), uint256(14254735066254181804989268537569016478615712223455618396370547325846023744049));

    }
    
    /*
     * @returns Whether the proof is valid given the hardcoded verifying key
     *          above and the public inputs
     */
    function verifyProof(
        uint256[2] memory a,
        uint256[2][2] memory b,
        uint256[2] memory c,
        uint256[79] memory input
    ) public view returns (bool r) {

        Proof memory proof;
        proof.A = Pairing.G1Point(a[0], a[1]);
        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);
        proof.C = Pairing.G1Point(c[0], c[1]);

        VerifyingKey memory vk = verifyingKey();

        require(80 == vk.IC.length, "verifier-invalid-input-length");

        // Compute the linear combination vk_x
        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);

        // Make sure that proof.A, B, and C are each less than the prime q
        require(proof.A.X < PRIME_Q, "verifier-aX-gte-prime-q");
        require(proof.A.Y < PRIME_Q, "verifier-aY-gte-prime-q");

        require(proof.B.X[0] < PRIME_Q, "verifier-cX0-gte-prime-q");
        require(proof.B.Y[0] < PRIME_Q, "verifier-cY0-gte-prime-q");

        require(proof.B.X[1] < PRIME_Q, "verifier-cX1-gte-prime-q");
        require(proof.B.Y[1] < PRIME_Q, "verifier-cY1-gte-prime-q");

        require(proof.C.X < PRIME_Q, "verifier-cX-gte-prime-q");
        require(proof.C.Y < PRIME_Q, "verifier-cY-gte-prime-q");

        // Make sure that every input is less than the snark scalar field
        for (uint256 i = 0; i < input.length; i++) {
            require(input[i] < SNARK_SCALAR_FIELD,"verifier-gte-snark-scalar-field");
            vk_x = Pairing.plus(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));
        }

        vk_x = Pairing.plus(vk_x, vk.IC[0]);

        return Pairing.pairing(
            Pairing.negate(proof.A),
            proof.B,
            vk.alfa1,
            vk.beta2,
            vk_x,
            vk.gamma2,
            proof.C,
            vk.delta2
        );
    }
}
